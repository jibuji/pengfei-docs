<!DOCTYPE html><html><head><meta charset="utf-8"><title>Untitled Document.md</title><style></style></head><body>
<h1 id="eclipse-sonar-">Eclipse + Sonar环境</h1>
<h2 id="-">背景：</h2>
<p>我们平时本地编译apk是这么做的：
  <code>./apk xxx.mk</code></p>
<p>如果加上<code>-s</code>,像这样:
    <code>./apk -s xxx.mk</code></p>
<p>在编译完成之后，就可以在下面的任何一个链接里找到自己的问题代码：</p>
<ul>
<li><code>http://18.8.10.91/sonar/</code>，</li>
<li><code>http://ss.alm.gionee.com/sonar/</code>，</li>
<li><code>http://19.9.0.104:9000/sonar/</code>，</li>
</ul>
<p>我们可以在这些web页面中查看具体的代码问题点，但没办法直接对代码修改，于是，我们需要切换到eclipse中，找到对应的代码，然后修改，这个过程效率很低。</p>
<h2 id="-">目的：</h2>
<p>解决修改问题代码效率低的问题。本方法所能达到的最终效果是这样的：在eclipse中可以看到问题点，点击问题点，可以自动跳转到问题代码处，即可直接修改。如图<img src="./final-demo.jpg" alt="Cool! Right?"></p>
<p>但其实本方案并非完美，有如下不足：</p>
<ul>
<li>在eclipse-sonar插件中分析的结果与我们平时采用<code>./apk -s xxx.mk</code>方法相比，分析的结果不同。</li>
<li>当我们连接<code>http://18.8.10.91/sonar/</code>等现有的sonar服务器时，eclipse中在分析的时候会报错，所以我自己建了一个sonar服务器，连接公司服务器失败的同事，可以连接我们自己的。</li>
</ul>
<h2 id="sonar-">Sonar框架图：</h2>
<p><img src="technical-architecture.jpg" alt="sonar architecture"></p>
<h2 id="-">准备工作：</h2>
<p> 从build_apk_env中提取可以直接运行sonar分析的脚本：
在执行完<code>./apk -s xxx.mk</code>之后，会在build_apk_env目录下看到ant目录，里面有如下内容：</p>
<ul>
<li>build.xml: 是ant命令的输入文件</li>
<li>project.properties</li>
<li>sonar.properties</li>
<li><p>sonar-ant-task-2.2.jar</p>
<p>  后面的三个文件都是被<code>build.xml</code>所引用的，且通过绝对路径引用的，请修改为相对路径。需要修改的地方如下：</p>
</li>
<li>build.xml中对project.properties和sonar.properties的引用处</li>
<li>sonar.properties中对my.sonar.jars的指定处</li>
</ul>
<p>然后可以把ant目录拷贝出来，建议放在相关项目的代码位置。然后进入新的ant目录，执行ant sonar，看是否正常执行完毕。如果出错，请先解决错误再继续。执行完毕后，就可以在<code>http://19.9.0.104:9000/sonar/</code>下看到你的模块最新检查的结果。</p>
<p>在<code>sonar.properties</code>中有几个参数需要留意下，暂时知道有这么个东西就行：
<code>sonar.host.url</code>
<code>sonar.jdbc.url</code></p>
<h2 id="-">步骤：</h2>
<ol>
<li>下载<code>sonar</code>插件：
<code>Eclipse</code>下选择<code>Help &gt; Install New Software</code>。在选择<code>Add</code>按钮后，增加<code>sonar</code>插件的更新地址<code>http://dist.sonar-ide.codehaus.org/eclipse/</code>。 选择组件<code>SonarQube Java</code>。完成安装。</li>
<li><p>配置：
在<code>eclispse</code>的<code>Window-&gt;Preference</code>的<code>SonarQube</code>项 添加sonar服务器地址, 如图
<img src="config-server.jpg" alt="config server"></p>
</li>
<li><p>在<code>eclipse</code>中右键点击项目，选择<code>Configure-&gt;Associate with SonarQube</code>，如下图。在<code>SonarQube Project</code>这一列，填入你要进行代码检查的项目名，当输入前三个字符时，它会自动联想出剩下的内容，如果找不到项目，在左上方会有提示，那么可能你的准备工作没做好，请返回到上面的准备工作处检查一下。
<img src="associate-demo.jpg" alt="associate-demo"></p>
</li>
<li><p>现在就可以再次右键点击项目，就会有一个<code>SonarQube</code>菜单项，选择<code>Analyze</code>即可开始检查代码, 这需要一段时间，请耐心等待。如果在这个过程中弹出错误框，那么你可能遇到了与我一样的情况，更改下<code>sonar.host.url</code>指向我们自己的服务器吧：<code>http://18.8.10.198:9000</code>。需要修改<code>sonar.properties</code>中的如下几个字段：</p>
<ul>
<li>sonar.host.url=<a href="http://18.8.10.198:9000/">http://18.8.10.198:9000/</a></li>
<li>sonar.jdbc.url=jdbc:h2:tcp://18.8.10.198:9092/sonar
然后在ant目录下执行<code>ant sonar</code>。同时，如同第2步，配置sonar服务器地址为:<code>http://18.8.10.198:9000/</code></li>
</ul>
</li>
<li>检查完成后，会出现这样的界面，如下图。在<code>SonarQube Issues</code>视图里可以看到代码问题点，展开子项，双击即可跳转到问题代码处。如果没有看到<code>SonarQube Issues</code>视图，可以在<code>Window-&gt;show views</code>中找到。
<img src="analyize-complete.jpg" alt="anylize-complete"></li>
</ol>

</body></html>